@startuml ../../../styles/images/modules/transactions/verifyTransaction-activity.png
skinparam BorderColor #blue\9932CC
skinparam backgroundcolor AntiqueWhite/white

title
亿书交易相关函数调用流程图

end title

footer copyright (c) imfly 2016.07.05 http://ebookchain.org
header 《Nodejs开发加密货币》分析用图：《交易》

' shared.addTransactions()代码逻辑

(*)--> [新建交易] "put /api/transactions/"

--> "1.整理交易数据"
--> "2.给合法交易签名"

' modules.transactions.receiveTransactions()逻辑
partition "3.验证交易合法性" {
  --> "处理（未确认）交易：modules.transactions.receiveTransactions()" as receiveTransactions
  note left
  代码在modules.transactions.receiveTransactions()方法里，
  显然，新整理签名的交易数据在加密货币里，属于未确认交易
  end note

  --> "执行processUnconfirmedTransaction()方法"
  if transaction.requesterPublicKey? then
    --> [yes] library.logic.transaction.process(transaction, sender, requester,cb)
    note bottom
    "这个是转账交易类型，该函数本身也进行了系列验证，
    并使用交易ID查询区块链数据库，确保交易未完成"
    end note

    --> ==verify==
  else
    --> [no] library.logic.transaction.process(transaction, sender,cb)
    note bottom
    这个是除转账之外的功能性交易类型，
    如注册别名地址等
    end note

    --> ==verify==
  endif

  --> private.doubleSpendingTransactions[transaction.id]
  note bottom
  这里要避免重复提交等“双花”问题
  end note

  --> library.logic.transaction.verify()
  note bottom
  该方法是对交易的验证，而前面数据整理部分是对数据的过滤，
  有相似的地方。这里包含：验证发送者（甲方）、签名、支付签名、
  签名唯一性、交易费、数额、时间戳等，代码简单，不详述
  end note

  partition "并入区块链" {
    --> private.addUnconfirmedTransaction()
    note bottom
    把未确认的交易都放到一个队列里处理，等同于下面的方法
    end note

    --> transactions.prototype.applyUnconfirmed()
    --> library.logic.transaction.applyUnconfirmed(transaction, sender, requester, cb);
    --> this.scope.account.merge(sender.address,)
    note left: 这是并入区块的方法进入点
    --> private.types[trs.type].applyUnconfirmed.call(this, trs, sender,)
  }
}

--> "4.广播到网络"

--> (*)
@enduml
